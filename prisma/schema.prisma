// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
enum STATUS {
  PROGRESS
  DONE
}

enum ROLE {
  USER
  MANAGER
  ADMIN
}

model category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  image       String?
  description String?
  products    product[]
  updatedAt   DateTime   @updatedAt
}

model product {
  id            Int             @id @default(autoincrement())
  authorName    String
  name          String
  source        String
  image         String
  status        STATUS          @default(PROGRESS)
  viewCount     Int             @default(0)
  description   String?
  createdBy     Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lists         list[]
  chapters      chapter[]
  comments      comment[]
  rates         rate[]
  categories    category[]
  views         view[]
  user          user            @relation(fields: [createdBy], references: [id])
  collabrations collabration[]
}

model chapter {
  id            Int       @id @default(autoincrement())
  productId     Int
  chapterName   String
  content       String
  chapterNumber Int
  price         Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  users         Int[]
  lists         list[]
  payments      payment[]
  product       product   @relation(fields: [productId], references: [id])

  @@unique([productId, chapterNumber])  
}

model user {
  id            Int              @id @default(autoincrement())
  role          ROLE             @default(USER)
  name          String
  email         String           @unique 
  phone         String?
  birthdate     DateTime?
  image         String?
  password      String?
  money         Float            @default(0)
  refreshToken  String?
  emailVerified Boolean          @default(false)
  createdAt     DateTime         @default(now())
  comments      comment[]
  rates         rate[]
  products      product[]
  lists         list[]
  payments      payment[]
  views         view[]
  collabrations collabration[]
}

model comment {
  id        Int      @id @default(autoincrement())
  productId Int
  content   String
  createdBy Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   product  @relation(fields: [productId], references: [id])
  user      user     @relation(fields: [createdBy], references: [id])
}

model rate {
  id        Int      @id @default(autoincrement())
  productId Int
  rating    Int
  createdBy Int      
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   product  @relation(fields: [productId], references: [id])
  user      user     @relation(fields: [createdBy], references: [id])

  @@unique([createdBy, productId])
}

model list {
  id             Int      @id @default(autoincrement())
  classification String
  createdBy      Int
  user           user     @relation(fields: [createdBy], references: [id])
  chapters       chapter[]
  products       product[]
}

model payment {
  id          Int      @id @default(autoincrement())
  amount      Float
  createdBy   Int
  createdAt   DateTime @default(now())
  user        user     @relation(fields: [createdBy], references: [id])
  chapters    chapter[]
}

model view {
  id             Int      @id @default(autoincrement())
  productId      Int
  userId         Int?
  ip             String
  viewedAt       DateTime @default(now())
  user           user?     @relation(fields: [userId], references: [id])
  product        product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@unique([ip, productId])
}

model collabration {
  id             Int      @id @default(autoincrement())
  userId         Int
  productId      Int
  viewedAt       DateTime @default(now())
  user           user     @relation(fields: [userId], references: [id])
  product        product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}