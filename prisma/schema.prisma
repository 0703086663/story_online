// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
enum STATUS {
  PROGRESS
  DONE
}

enum ROLE {
  USER
  MANAGER
  ADMIN
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  updatedAt   DateTime   @updatedAt
}

model Product {
  id            Int             @id @default(autoincrement())
  authorName    String
  name          String
  source        String
  image         String
  status        STATUS          @default(PROGRESS)
  viewCount     Int             @default(0)
  description   String?
  createdBy     Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lists         List[]
  chapters      Chapter[]
  comments      Comment[]
  rates         Rate[]
  categories    Category[]
  views         View[]
  User          User            @relation(fields: [createdBy], references: [id])
  collabrations Collabration[]
}

model Chapter {
  id            Int       @id @default(autoincrement())
  productId     Int
  chapterName   String
  content       String
  chapterNumber Int
  price         Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  users         Int[]
  lists         List[]
  histories     PaymentHistory[]
  Product       Product   @relation(fields: [productId], references: [id])

  @@unique([productId, chapterNumber])  
}

model User {
  id            Int              @id @default(autoincrement())
  role          ROLE             @default(USER)
  name          String
  email         String           @unique 
  phone         String?
  birthdate     DateTime?
  picture       String?
  password      String?
  money         Float            @default(0)
  refreshToken  String?
  emailVerified Boolean          @default(false)
  createdAt     DateTime         @default(now())
  test          String?
  comments      Comment[]
  rates         Rate[]
  products      Product[]
  lists         List[]
  payments      PaymentHistory[]
  views         View[]
  collabrations Collabration[]
  
}

model Comment {
  id        Int      @id @default(autoincrement())
  productId Int
  content   String
  createdBy Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [createdBy], references: [id])
}

model Rate {
  id        Int      @id @default(autoincrement())
  productId Int
  rating    Int
  createdBy Int      
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [createdBy], references: [id])

  @@unique([createdBy, productId])
}

model List {
  id             Int      @id @default(autoincrement())
  classification String
  createdBy      Int
  User           User     @relation(fields: [createdBy], references: [id])
  chapters       Chapter[]
  products       Product[]
}

model PaymentHistory {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdBy Int
  createdAt DateTime @default(now())
  User      User     @relation(fields: [createdBy], references: [id])
  chapters   Chapter[]
}

model View {
  id             Int      @id @default(autoincrement())
  productId      Int
  userId         Int
  viewedAt       DateTime @default(now())
  User           User     @relation(fields: [userId], references: [id])
  Product        Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Collabration {
  id             Int      @id @default(autoincrement())
  userId         Int
  productId      Int
  viewedAt       DateTime @default(now())
  User           User     @relation(fields: [userId], references: [id])
  Product        Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}